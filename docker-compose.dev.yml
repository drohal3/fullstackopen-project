version: '3.8'

services:
  #  frontend
  app:
    image: frontend-dev
    build:
      context: frontend # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./frontend/:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    ports:
      - 3001:3000
    container_name: frontend-dev # This will name the container hello-front-dev
    environment:
      DANGEROUSLY_DISABLE_HOST_CHECK: true # for dev env should be ok, production would need a proper solution for invalid host header error
      WDS_SOCKET_PORT: 8080
  #      HOST: 127.0.0.1
  #    backend
  mongo:
    image: mongo
    container_name: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./backend/src/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js # bind mount - mongo-init.js in the mongo folder of the host machine is the same as the mongo-init.js file in the container's /docker-entrypoint-initdb.d
      - ./backend/mongo_data:/data/db # to persist data even after stopping and rerunning container / storing data outside of container
  server:
    image: backend-dev
    ports:
      - 3000:3000
    build:
      context: backend # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    environment:
      NODE_ENV: development # not needed - set inline
      MONGODB_URI: mongodb://the_username:the_password@mongo:27017/the_database?retryWrites=true&w=majority
      TEST_MONGODB_URI: mongodb://the_username:the_password@mongo:27017/the_database_test?retryWrites=true&w=majority # THE port mapping - container port must be used!
      SECRET: abcd123
      PORT: 3000
    volumes: # Declare the volume
      - ./backend/src/:/usr/src/app/src/
    container_name: backend-dev
  #  reverse proxy
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy
    depends_on:
      - app
      - server